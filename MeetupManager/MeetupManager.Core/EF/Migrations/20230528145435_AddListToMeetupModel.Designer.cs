// <auto-generated />
using System;
using MeetupManager.Core.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetupManager.Core.EF.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230528145435_AddListToMeetupModel")]
    partial class AddListToMeetupModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetupManager.Core.Models.Meetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Spending")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meetups");
                });

            modelBuilder.Entity("MeetupManager.Core.Models.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("MeetupManager.Core.Models.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("MeetupSpeaker", b =>
                {
                    b.Property<Guid>("MeetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpeakersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetupId", "SpeakersId");

                    b.HasIndex("SpeakersId");

                    b.ToTable("MeetupSpeaker");
                });

            modelBuilder.Entity("MeetupSponsor", b =>
                {
                    b.Property<Guid>("MeetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SponsorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetupId", "SponsorsId");

                    b.HasIndex("SponsorsId");

                    b.ToTable("MeetupSponsor");
                });

            modelBuilder.Entity("MeetupSpeaker", b =>
                {
                    b.HasOne("MeetupManager.Core.Models.Meetup", null)
                        .WithMany()
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetupManager.Core.Models.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetupSponsor", b =>
                {
                    b.HasOne("MeetupManager.Core.Models.Meetup", null)
                        .WithMany()
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetupManager.Core.Models.Sponsor", null)
                        .WithMany()
                        .HasForeignKey("SponsorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
